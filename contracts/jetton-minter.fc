#pragma version >=0.4.3;

#include "stdlib.fc";
#include "op-codes.fc";
#include "workchain.fc";
#include "jetton-utils.fc";
#include "gas.fc";
#include "./vnst-config/storage.fc";
#include "./vnst-config/management-utils.fc";
#include "./vnst-config/jetton-operations.fc";
#include "./vnst-config/admin-functions.fc";
#include "./vnst-config/helpers.fc";
#include "./vnst-config/getters.fc";
#include "./vnst-config/admin-call.fc";
#include "./vnst-config/op-codes.fc";
#include "./vnst-config/constant.fc";

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();
    (int total_supply, slice admin_address, slice next_admin_address, cell jetton_wallet_code, cell metadata_uri, cell config_data, cell management) = load_data();
    (cell moderator, cell verified_user, slice usdt_jetton_wallet) = load_management(management);
    if (msg_flags & 1) { 
        in_msg_body~skip_bounced_prefix();
        ifnot (in_msg_body~load_op() == op::internal_transfer) {
            return ();
        }
        in_msg_body~skip_query_id();
        int jetton_amount = in_msg_body~load_coins();
        save_data(total_supply - jetton_amount, admin_address, next_admin_address, jetton_wallet_code, metadata_uri, config_data, management);
        return ();
    }
    slice sender_address = in_msg_full_slice~load_msg_addr();
    int fwd_fee_from_in_msg = in_msg_full_slice~retrieve_fwd_fee();
    int fwd_fee = get_original_fwd_fee(MY_WORKCHAIN, fwd_fee_from_in_msg); 
    (int op, int query_id) = in_msg_body~load_op_and_query_id();
    (int total_supply, slice admin_address, slice next_admin_address, cell jetton_wallet_code, cell metadata_uri, cell config_data, cell management) = load_data();
    (cell moderator, cell verified_user, slice usdt_jetton_wallet) = load_management(management);
    
    if (op == op::top_up) {
        return ();
    }
    
    if (op == op::burn_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(error::not_valid_wallet,
            equal_slices_bits(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, next_admin_address, jetton_wallet_code, metadata_uri, config_data, management);
        slice response_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();

        if (~ is_address_none(response_address)) {
            var msg = begin_cell()
            .store_msg_flags_and_address_none(NON_BOUNCEABLE)
            .store_slice(response_address)
            .store_coins(0)
            .store_prefix_only_body()
            .store_op(op::excesses)
            .store_query_id(query_id);
            send_raw_message(msg.end_cell(), SEND_MODE_IGNORE_ERRORS | SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        return ();
    }

    if (op == op::provide_wallet_address) {
        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_bool();
        in_msg_body.end_parse();

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();
        var msg = begin_cell()
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(sender_address)
        .store_coins(0)
        .store_prefix_only_body()
        .store_op(op::take_wallet_address)
        .store_query_id(query_id);

        if (is_same_workchain(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_address_none();
        }

        cell msg_cell = msg.store_maybe_ref(included_address).end_cell();

        send_raw_message(msg_cell, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
        return ();
    }

    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        cell ref_cs = in_msg_body~load_ref(); 
        slice ref_ds = ref_cs.begin_parse();
        int transferred_op = ref_ds~load_uint(32);
        int mint_ton_amount = ref_ds~load_coins();
        int mint_forward_ton_amount = ref_ds~load_coins();
        if(transferred_op == op::mint_vnst) {
            mint(sender_address,from_address, mint_ton_amount, mint_forward_ton_amount, jetton_amount, query_id);
        }
        return ();
    }
    
    if (op == op::redeem) {
        check_same_workchain(sender_address);
        int ton_amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();
        int vnst_amount = in_msg_body~load_uint(128);
        redeem(sender_address, ton_amount, forward_ton_amount, vnst_amount, query_id);
        return ();
    }

    if (is_check(moderator, sender_address)) {
        handle_moderator_messages(sender_address, op, query_id, msg_value, in_msg_body, fwd_fee);
        return ();
    }

    if (equal_slices_bits(sender_address, admin_address)) {
        handle_owner_messages(sender_address, op, query_id, msg_value, in_msg_body);
        return ();
    }

    throw(error::wrong_op);
}
